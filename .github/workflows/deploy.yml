      - name: Define image tags
        id: vars
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE_API=ghcr.io/${OWNER_LC}/${REPO_NAME}-api:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_SCRAPER=ghcr.io/${OWNER_LC}/${REPO_NAME}-scraper:latest" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
name: build-and-deploy

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build & Push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile
          target: api
          push: true
          tags: ${{ steps.vars.outputs.IMAGE_API }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build & Push Scraper image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile
          target: scraper
          push: true
          tags: ${{ steps.vars.outputs.IMAGE_SCRAPER }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Ensure remote directories
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail
            mkdir -p ~/stocks-scraper/infra

      - name: Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: "infra/docker-compose.yml"
          target: "~/stocks-scraper/"

      - name: Upload .env.example (won't overwrite existing .env)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: "infra/.env.example"
          target: "~/stocks-scraper/"

      - name: Deploy using prebuilt images
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail
            cd ~/stocks-scraper
            
            # Define image tags for compose (must match workflow build tags)
            OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            REPO_NAME=${{ github.event.repository.name }}
            export IMAGE_API=ghcr.io/${OWNER_LC}/${REPO_NAME}-api:latest
            export IMAGE_SCRAPER=ghcr.io/${OWNER_LC}/${REPO_NAME}-scraper:latest

            # Login to GHCR for pulling
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Ensure env file exists (create from example if missing)
            if [ ! -f infra/.env ]; then cp infra/.env.example infra/.env; fi

            # Pull and (re)start services
            docker compose -f infra/docker-compose.yml pull
            docker compose -f infra/docker-compose.yml up -d --no-build

            # Show status
            docker compose -f infra/docker-compose.yml ps
